generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/core.db"
}

model Anime {
  id           Int       @id @default(autoincrement())
  hash         String    @unique         /// torrent hash for download
  titleRaw     String                    /// published title by submitter
  titleParsed  String?                   /// parsed title with anitomy or ai
  titleJp      String?                   /// japanese title
  titleCn      String?                   /// chinese title
  titleEn      String?                   /// english title
  titleRomaji  String?                   /// romaji title
  size         String?                   /// file size
  torrent      String?                   /// download link for the torrent file
  coverAnilist String?                   /// anilist cover image url
  coverBangumi String?                   /// bangumi cover image url
  idAnilist    String?                   /// anilist id
  idBangumi    String?                   /// bangumi id
  pubDate      DateTime?                 /// published date
  createdAt    DateTime  @default(now()) /// created time
  source       String                    /// source (Nyaa, Mikan)
  sourceUrl    String                    /// source url
  rss          Rss[]                     /// related rss subscriptions
}

model Rss {
  id           Int       @id @default(autoincrement())
  name         String    @unique         /// rss name
  url          String                    /// rss url
  type         String                    /// rss type (Nyaa, Mikan)
  cron         String                    /// rss cron
  state        Int                       /// 0: running, 1: success
  createdAt    DateTime  @default(now()) /// created time
  refreshedAt  DateTime?                 /// last refreshed time
  refreshCount Int                       /// refresh count, avoid sending notification at first refresh
  animes       Anime[]
}

model Downloader {
  id           Int       @id @default(autoincrement())
  name         String    @unique         /// downloader name
  url          String    @unique         /// downloader url
  type         String                    /// downloader type (qBittorrent, Transmission, Aria2)
  username     String                    /// downloader username
  password     String                    /// downloader password
  createdAt    DateTime  @default(now()) /// downloader created time
  cookie       String                    /// downloader cookie
}

model Notification {
  id           Int       @id @default(autoincrement())
  name         String    @unique         /// notification name
  filter       String?                   /// name of rss which want to send notification, empty means all
  type         String                    /// notification type (Bark, Gotify, ServerChan)
  url          String                    /// notification url
  token        String                    /// notification token
  title        String                    /// notification title
  message      String                    /// notification message
  extra        String?                   /// extra parameters on POST request, split by &
  state        Int                       /// 0: disabled, 1: enabled
  createdAt    DateTime  @default(now()) /// created time
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique         /// username
  password     String                    /// hashed password
  createdAt    DateTime  @default(now()) /// created time
}

model Device {
  id           Int       @id @default(autoincrement())
  token        String    @unique         /// auth_token
  browser      String?                   /// browser and version
  os           String?                   /// os and version
  ip           String?                   /// ip address
  createdAt    DateTime  @default(now()) /// created time
  expiredAt    DateTime                  /// expired time
}

model Config {
  key          String    @id
  value        String
}
